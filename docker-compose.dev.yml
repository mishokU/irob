version: '3.8'

#sudo docker-compose -f docker-compose.dev.yml build
#sudo docker-compose -f docker-compose.dev.yml up -d

services:

  # Контейнер с React app
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      target: dev
    hostname: ${COMPOSE_PROJECT_NAME}_client
    container_name: ${COMPOSE_PROJECT_NAME}_client
    env_file:
      - .env
    working_dir: /opt/client
    environment:
      WDS_SOCKET_PORT: 0
    volumes:
      - ./client:/opt/client
      - ./static:/opt/static

  # Контейнер с Node.js
  server:
    hostname: ${COMPOSE_PROJECT_NAME}_server
    container_name: ${COMPOSE_PROJECT_NAME}_server
    build:
      context: ./server/app
      dockerfile: Dockerfile
      target: dev
    tty: true
    working_dir: /opt/server
    volumes:
      - ./server/app:/opt/server
      - ./static:/opt/static
    env_file:
      - .env
    depends_on:
      - db

  ws:
    hostname: ${COMPOSE_PROJECT_NAME}_ws
    container_name: ${COMPOSE_PROJECT_NAME}_ws
    restart: always
    working_dir: /opt/ws
    build:
      context: server/webSocket
      dockerfile: Dockerfile
      target: dev
    env_file:
      - .env
    volumes:
      - ./server/webSocket:/opt/ws
    ports:
      - "4000:4000"

  indexer:
    hostname: ${COMPOSE_PROJECT_NAME}_indexer
    container_name: ${COMPOSE_PROJECT_NAME}_indexer
    restart: always
    working_dir: /opt/indexer
    build:
      context: server/daysIndexer
      dockerfile: Dockerfile
      target: dev
    env_file:
      - .env
    volumes:
      - ./server/daysIndexer:/opt/indexer
    ports:
      - "4001:4001"

  # Контейнер с базой данных
  db:
    hostname: ${COMPOSE_PROJECT_NAME}_db
    container_name: ${COMPOSE_PROJECT_NAME}_db
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=IROB
      - POSTGRES_NAME=IROB
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
  
  # Контейнер с nginx
  nginx:
    hostname: ${COMPOSE_PROJECT_NAME}_nginx
    container_name: ${COMPOSE_PROJECT_NAME}_nginx
    image: nginx:latest
    depends_on:
      - server
      - db
      - pgadmin
      - client
      - ws
    ports:
      - '8012:80'
    restart: always
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/includes/proxy.conf:ro
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro


  # Контейнер с pgadmin
  pgadmin:
    hostname: ${COMPOSE_PROJECT_NAME}_pgadmin
    container_name: ${COMPOSE_PROJECT_NAME}_pgadmin
    depends_on:
      - db
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: info@proglib.io
      PGADMIN_DEFAULT_PASSWORD: qwertyuiop
    expose:
      - '80'
    restart: always

  ganache:
    hostname: ${COMPOSE_PROJECT_NAME}_ganache
    container_name: ${COMPOSE_PROJECT_NAME}_ganache
    ports:
      - "8545:8545"
    image: trufflesuite/ganache-cli:latest
    entrypoint:
      - node
      - /app/ganache-core.docker.cli.js
      - --deterministic
      - --db=/ganache_data
      - --mnemonic
      - 'minimum symptom minute gloom tragic situate silver mechanic salad amused elite beef'
      - --networkId
      - '5777'
      - --hostname
      - --acctKeys
      - '0.0.0.0'

volumes:
  db_data:
